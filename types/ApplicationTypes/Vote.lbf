module ApplicationTypes.Vote

import Prelude (Eq, Integer)
import Plutus.V1 (Address, PlutusData, TokenName)

-- | Vote direction
sum VoteDirection =
    -- | Vote in favour of the proposal
    For
  | -- | Vote against the proposal
    Against
derive Eq VoteDirection
derive PlutusData VoteDirection

-- | The vote datum, representing a vote cast by a user on a specific proposal
record VoteDatum = {
  proposalTokenName : TokenName
  -- ^ The name of the proposal for which this vote relates to.
  -- This is checked in 'Dao.Tally.Script.validateTally' to ensure
  -- the vote is for the correct proposal.
  , direction : VoteDirection
  -- ^ Whether the vote is for or against the proposal.
  , voteOwner : Address
  -- ^ The address of the user casting the vote.
  , returnAda : Integer
  -- ^ Ada amount to return
  }
derive Eq VoteDatum
derive PlutusData VoteDatum

-- | Redeemer for 'Dao.Vote.Script.mkVoteMinter' policy
sum VoteMinterActionRedeemer = 
    Mint 
  | Burn
derive Eq VoteMinterActionRedeemer
derive PlutusData VoteMinterActionRedeemer

-- | Redeemer for 'Dao.Vote.Script.validateVote' validator
sum VoteActionRedeemer
  = -- | Vote should be counted in tallying phase
    Count
  | -- | Retract the vote
    Cancel
derive Eq VoteActionRedeemer
derive PlutusData VoteActionRedeemer
