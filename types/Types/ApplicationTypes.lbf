module Types.ApplicationTypes

import Prelude (Eq, Integer)
import Plutus.V1 
  ( Address
  , CurrencySymbol
  , POSIXTime
  , PlutusData
  , ScriptHash
  , TokenName
  )

-- | This represents the three possible types of proposals.
-- A `Trip` proposal, a `General` proposal or an `Upgrade` proposal.
sum ProposalType =
    -- | Upgrade a proposal
    Upgrade 
      -- | Symbol of the upgrade minting policy
      CurrencySymbol Integer
  | -- | A general proposal
    General 
      -- | General payment address
      Address 
      -- | General payment amount
      Integer
  | -- | A trip proposal
    Trip 
      -- | Travel agent address
      Address 
      -- | Traveller address
      Address 
      -- | Total travel cost
      Integer
derive Eq ProposalType
derive PlutusData ProposalType

-- | Tally state datum
record TallyStateDatum = {
  -- | The `ProposalType` type of the proposal
  tsProposal : ProposalType
  -- | The end of the proposal period
  , tsProposalEndTime : POSIXTime
  -- | The count of votes for the proposal
  , tsFor : Integer
  -- | The count of votes against the proposal
  , tsAgainst : Integer
  }
derive Eq TallyStateDatum
derive PlutusData TallyStateDatum

-- | DynamicConfig Datum holds the main info needed for the contracts.
record DynamicConfigDatum = {
  -- | Hash of the `Dao.Types.Tally.Script.validateTally` validator
  dcTallyValidator : ScriptHash
  -- | Hash of the `Dao.Types.Treasury.Script.validateTreasury` validator
  , dcTreasuryValidator : ScriptHash
  -- | Hash of the `Dao.Types.ConfigurationNft.Script.validateConfiguration` validator
  , dcConfigurationValidator : ScriptHash
  -- | Hash of the `Dao.Types.Vote.Script.validateVote` validator
  , dcVoteValidator : ScriptHash
  -- | The majority and relative majority percentages used
  -- in calculating whether a proposal has sufficient votes to pass
  -- (All times a 1000)
  , dcUpgradeMajorityPercent : Integer
  , dcUpgradeRelativeMajorityPercent : Integer
  , dcGeneralMajorityPercent : Integer
  , dcGeneralRelativeMajorityPercent : Integer
  , dcTripMajorityPercent : Integer
  , dcTripRelativeMajorityPercent : Integer
  -- | A threshold that needs to be passed when checking in
  -- the script if there is a sufficient relative majority
  , dcTotalVotes : Integer
  -- | Disbursement allowable disbursement amounts, for general and trip proposals
  -- Checked in the `Dao.Treasury.Script.validateTreasury` validator
  , dcMaxGeneralDisbursement : Integer
  , dcMaxTripDisbursement : Integer
  -- | The percentage of the total travel cost for the agent in trip proposals
  -- Checked in the `Dao.Treasury.Script.validateTreasury` validator
  -- (Agent disbursement percentage is times a 1000)
  , dcAgentDisbursementPercent : Integer
  -- | Like a cool down period to be added to the proposal end time
  -- specified in the `Dao.Types.TallyStateDatum` datum.
  -- The treasury cannot disburse funds until
  -- after the end time plus the offset has passed
  -- (Offset is in milliseconds)
  , dcProposalTallyEndOffset : Integer
  -- | Symbol of the `Dao.Tally.Script.mkTallyNftMinter` minting policy
  , dcTallyNft : CurrencySymbol
  -- | Symbol of the `Dao.Vote.Script.mkVoteMinter` minting policy
  , dcVoteCurrencySymbol : CurrencySymbol
  -- | Token name for the vote value minted by `Dao.Vote.Script.mkVoteMinter`
  , dcVoteTokenName : TokenName
  -- | Symbol of the Vote NFT
  , dcVoteNft : CurrencySymbol
  -- | Symbol of the fungible vote value
  , dcVoteFungibleCurrencySymbol : CurrencySymbol
  -- | Token name for fungible vote value
  , dcVoteFungibleTokenName : TokenName
  -- | Fungible token percentage (Percentage value is times a 1000)
  , dcFungibleVotePercent : Integer
  }
